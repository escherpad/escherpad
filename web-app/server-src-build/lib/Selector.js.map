{"version":3,"sources":["../../src/lib/Selector.js"],"names":["Selector","func","any","selector","Component","store","setState","subscription","props","subscribe","storeToState","unsubscribe","newProps","newStates","Object","keys","length","state","propTypes","isRequired","dispatch"],"mappings":";;;;;;;;;;kBAUwBA,Q;;AALxB;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EANA;;;;;IAQKC,I,oBAAAA,I;IAAMC,G,oBAAAA,G;AAEI,SAASF,QAAT,CAAkBG,QAAlB,EAA4BC,SAA5B,EAAuC;AAAA;;AAEpD;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,mCAOeC,KAPf,EAOsB;AAClB,aAAKC,QAAL,CAAcH,SAASE,KAAT,CAAd;AACD;AATH;AAAA;AAAA,2CAWuB;AACnB,aAAKE,YAAL,GAAoB,KAAKC,KAAL,CAAWH,KAAX,CAAiBI,SAAjB,CAA2B,KAAKC,YAAhC,CAApB;AACD;AAbH;AAAA;AAAA,6CAeyB;AACrB,aAAKH,YAAL,CAAkBI,WAAlB;AACD;AAjBH;AAAA;AAAA,4CAmBwBC,QAnBxB,EAmBkCC,SAnBlC,EAmB6C;AACzC;AACA;AACA,YAAIC,OAAOC,IAAP,CAAYH,QAAZ,EAAsBI,MAAtB,GAA+B,CAAnC,EAAsC,OAAO,IAAP;AACtC,eAAO,KAAP;AACD;AAxBH;AAAA;AAAA,+BA0BW;AACP,YAAI,CAAC,KAAKC,KAAV,EAAiB,OAAO,0CAAP;AACjB,YAAIT,qBAAY,KAAKS,KAAjB,EAA2B,KAAKT,KAAhC,CAAJ;AACA,eAAO,8BAAC,SAAD,EAAeA,KAAf,CAAP;AACD;AA9BH;;AAAA;AAAA,IAAqC,gBAAMJ,SAA3C,uMACSc,SADT,GACqB;AACjBb,WAAOH,IAAIiB,UADM;AAEjBC,cAAUnB,KAAKkB;AAFE,GADrB;AAgCD","file":"Selector.js","sourcesContent":["/** Created by ge on 12/6/16.\n * Usage Example\n * Selector(key/selectionFunction/arrayOf'keys/etc, component)\n * */\n\nimport React, {PropTypes} from \"react\";\nimport {autobind} from \"core-decorators\";\n\nvar {func, any} = PropTypes;\n\nexport default function Selector(selector, Component) {\n\n  return class SelectContainer extends React.Component {\n    static propTypes = {\n      store: any.isRequired,\n      dispatch: func.isRequired\n    };\n\n    @autobind\n    storeToState(store) {\n      this.setState(selector(store))\n    }\n\n    componentWillMount() {\n      this.subscription = this.props.store.subscribe(this.storeToState);\n    }\n\n    componentWillUnmount() {\n      this.subscription.unsubscribe()\n    }\n\n    shouldComponentUpdate(newProps, newStates) {\n      // note: both store and dispatch are required.\n      // note2: state update *always* trigger re-render\n      if (Object.keys(newProps).length > 2) return true;\n      return false;\n    }\n\n    render() {\n      if (!this.state) return <div></div>;\n      let props = {...this.state, ...this.props};\n      return <Component {...props}/>\n    }\n  }\n}\n"]}