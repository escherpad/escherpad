{"version":3,"sources":["../../../src/lib/immutables/collaborative-string.js"],"names":["insert","del","transform","KEYS","type","INSERT","DELETE","string","cursor","start","end","ins","slice","length","op1","op2","k1","k2"],"mappings":";;;;;;QAegBA,M,GAAAA,M;QAQAC,G,GAAAA,G;QASAC,S,GAAAA,S;;AA5BhB;;AAEA,a,CANA;;;;AAOO,IAAMC,sBAAO;AAClBC,QAAM;AADY,CAAb;AAGP;AACO,IAAMC,0BAAS,KAAf;AACA,IAAMC,0BAAS,KAAf;;AAEP;AACO,SAASN,MAAT,CAAgBO,MAAhB,EAAwBC,MAAxB,EAAgCC,KAAhC,EAAuCC,GAAvC,EAA4CC,GAA5C,EAAiD;AACtD,MAAI,OAAOD,GAAP,KAAe,WAAnB,EAAgCA,MAAMD,KAAN;AAChC,SAAO;AACLF,YAAQA,OAAOK,KAAP,CAAa,CAAb,EAAgBH,KAAhB,IAAyBE,GAAzB,GAA+BJ,OAAOK,KAAP,CAAaF,GAAb,CADlC;AAELF,YAASA,SAASC,KAAV,GAAmBD,MAAnB,GAA4BA,SAASC,KAAT,GAAiBE,IAAIE;AAFpD,GAAP;AAID;;AAEM,SAASZ,GAAT,CAAaM,MAAb,EAAqBC,MAArB,EAA6BC,KAA7B,EAAoCC,GAApC,EAAyC;AAC9C,SAAO;AACLH,YAAQA,OAAOK,KAAP,CAAa,CAAb,EAAgBH,KAAhB,IAAyBF,OAAOK,KAAP,CAAaF,GAAb,CAD5B;AAELF,YAASA,SAASC,KAAV,GAAmBD,MAAnB,GACLA,SAASE,GAAV,GAAiBD,KAAjB,GAAyBA,QAAQD,MAAR,GAAiBE;AAHvC,GAAP;AAKD;;AAED;AACO,SAASR,SAAT,CAAmBY,GAAnB,EAAwBC,GAAxB,EAA6B;AAClC,MAAIC,KAAKF,IAAIX,KAAKC,IAAT,CAAT;AACA,MAAIa,KAAKF,IAAIZ,KAAKC,IAAT,CAAT;AACA,MAAIY,OAAOX,MAAP,IAAiBY,OAAOZ,MAA5B,EAAoC,CACnC,CADD,MACO,IAAIW,OAAOV,MAAP,IAAiBW,OAAOZ,MAA5B,EAAoC,CAC1C,CADM,MACA,IAAIW,OAAOX,MAAP,IAAiBY,OAAOX,MAA5B,EAAoC,CAC1C,CADM,MACA,IAAIU,OAAOV,MAAP,IAAiBW,OAAOX,MAA5B,EAAoC,CAC1C;AACF","file":"collaborative-string.js","sourcesContent":["/** Created by ge on 1/14/17.\n * immutable Array and helper functions\n *\n */\nimport {add} from \"./charInt\";\n\n\"use strict\";\nexport const KEYS = {\n  type: 't',\n};\n// operation types\nexport const INSERT = 'ins';\nexport const DELETE = 'del';\n\n// operations\nexport function insert(string, cursor, start, end, ins) {\n  if (typeof end === \"undefined\") end = start;\n  return {\n    string: string.slice(0, start) + ins + string.slice(end),\n    cursor: (cursor < start) ? cursor : cursor + start + ins.length\n  };\n}\n\nexport function del(string, cursor, start, end) {\n  return {\n    string: string.slice(0, start) + string.slice(end),\n    cursor: (cursor < start) ? cursor :\n      (cursor < end) ? start : start + cursor - end\n  };\n}\n\n// transform the second operation w.r.t. the first\nexport function transform(op1, op2) {\n  let k1 = op1[KEYS.type];\n  let k2 = op2[KEYS.type];\n  if (k1 === INSERT && k2 === INSERT) {\n  } else if (k1 === DELETE && k2 === INSERT) {\n  } else if (k1 === INSERT && k2 === DELETE) {\n  } else if (k1 === DELETE && k2 === DELETE) {\n  }\n}\n\n"]}