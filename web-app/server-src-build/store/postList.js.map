{"version":3,"sources":["../../src/store/postList.js"],"names":["postList","setCurrentFolder","onSetCurrentFolder","watchFolder","listFilesByExtension","ORDER_POSTS_BY","UPDATE_SEARCH_QUERY","SET_CURRENT_FOLDER","state","orderBy","searchQuery","action","type","query","accountKey","currentFolder","folder","QUERIES","accessToken","extension","parentFolder","updateAccessToken","search","searchResponse","matches","ind","metadata","console","log","warn","post","id","title","name","path_display","modifiedAt","client_modified","server_modified","split","slice","join","info","account","accounts","service","k","editor","list_response","list","cursor","listFeed","res","changes","listContinue","i","entities","length","postId","backoff"],"mappings":";;;;;;;kQAAA;;;QAWgBA,Q,GAAAA,Q;QAoBAC,gB,GAAAA,gB;QA0CCC,kB,GAAAA,kB;QAyBAC,W,GAAAA,W;;AAjGjB;;AACA;;;;AACA;;AACA;;;;mDAsCUC,oB;oDA+BOF,kB;oDAyBAC,W;;AA3FV,IAAME,0CAAiB,gBAAvB;AACA,IAAMC,oDAAsB,qBAA5B;AACA,IAAMC,kDAAqB,oBAA3B;;AAEA,SAASP,QAAT,GAA4E;AAAA,MAA1DQ,KAA0D,uEAAlD,EAACC,SAAS,YAAV,EAAwBC,aAAa,EAArC,EAAkD;AAAA,MAARC,MAAQ;;AACjF,MAAIA,OAAOC,IAAP,KAAgBP,cAApB,EAAoC;AAClC,wBAAWG,KAAX,IAAkBC,SAASE,OAAOF,OAAlC;AACD,GAFD,MAEO,IAAIE,OAAOC,IAAP,KAAgBN,mBAApB,EAAyC;AAC9C,wBAAWE,KAAX,IAAkBE,aAAaC,OAAOE,KAAtC;AACD,GAFM,MAEA,IAAIF,OAAOC,IAAP,KAAgBL,kBAApB,EAAwC;AAC7C,wBACKC,KADL;AAEE;AACAE,mBAAa,EAHf;AAIEI,kBAAa,OAAOH,OAAOG,UAAd,KAA6B,WAA9B,GAA6CH,OAAOG,UAApD,GAAiEN,MAAMM,UAJrF;AAKE;AACAC,qBAAgB,OAAOJ,OAAOK,MAAd,KAAyB,WAA1B,GAAyCL,OAAOK,MAAhD,GAAyDR,MAAMQ;AANhF;AAQD,GATM,MASA;AACL,WAAOR,KAAP;AACD;AACF;;AAED;AACO,SAASP,gBAAT,CAA0Ba,UAA1B,EAAsCE,MAAtC,EAA8C;AACnD;;AACA,SAAO;AACLJ,UAAML,kBADD;AAELO,0BAFK;AAGLE;AAHK,GAAP;AAKD;;AAED,IAAIC,UAAU,CAAC,MAAD,EAAS,OAAT,EAAkB,OAAlB,EAA2B,OAA3B,EAAoC,OAApC,EAA6C,OAA7C,CAAd;;AAEA,SAAUb,oBAAV,CAA+Bc,WAA/B,EAA4CJ,UAA5C,EAAwDK,SAAxD,EAAmEC,YAAnE;AAAA;;AAAA;AAAA;AAAA;AAAA;AACE,4BAAKC,iBAAL,CAAuBH,WAAvB;AADF;AAAA,iBAE6B,kBAAKI,MAAL,CAAYH,SAAZ,EAAuBC,YAAvB,EAAqC,CAArC,EAAwC,GAAxC,EAA6C,UAA7C,CAF7B;;AAAA;AAEMG,wBAFN;;AAAA,eAIMA,eAAeC,OAJrB;AAAA;AAAA;AAAA;;AAAA,gDAKoBD,eAAeC,OALnC;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKaC,aALb;AAMYC,kBANZ,GAMuBH,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,QANnD;;AAOM,cAAIA,QAAJ,EAAc;AACZC,oBAAQC,GAAR,CAAY,aAAZ,EAA2BF,QAA3B;AACD,WAFD,MAEO;AACLC,oBAAQE,IAAR,CAAa,0BAAb,EAAyCN,eAAeC,OAAf,CAAuBC,GAAvB,CAAzC;AACD;AAXP,wBAY2B,wBAZ3B,EAYab,IAZb,eAYaA,IAZb,EAYmBkB,IAZnB,eAYmBA,IAZnB;AAaaC,YAbb,GAa4DL,QAb5D,CAaaK,EAbb,EAauBC,KAbvB,GAa4DN,QAb5D,CAaiBO,IAbjB,EAa4Cb,aAb5C,GAa4DM,QAb5D,CAa8BQ,YAb9B;AAcYC,oBAdZ,GAcyB,0CAA2BT,SAASU,eAAT,IAA4BV,SAASW,eAAhE,CAdzB;AAAA;AAAA,iBAeY,wBAAS;AACbzB,sBADa;AAEbkB,+BACKA,IADL;AAEE;AACAC,oBAHF;AAIEC,0BAJF;AAKEZ,4BAAcA,cAAakB,KAAb,CAAmB,GAAnB,EAAwBC,KAAxB,CAA8B,CAA9B,EAAiC,CAAC,CAAlC,EAAqCC,IAArC,CAA0C,GAA1C,CALhB;AAMEL,oCANF;AAOErB,0BAAYA;AAPd;AAFa,WAAT,CAfZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA+BO,SAAUZ,kBAAV;AACL;;AADK;;AAAA;AAAA;AAAA;AAAA;AAAA,eAEE,IAFF;AAAA;AAAA;AAAA;;AAAA;AAAA,iBAGyB,oBAAKK,kBAAL,CAHzB;;AAAA;AAAA;AAGEC,eAHF,QAGEA,KAHF;AAGSG,gBAHT,QAGSA,MAHT;;AAAA,cAIEA,OAAOG,UAJT;AAAA;AAAA;AAAA;;AAKD;AACAa,kBAAQc,IAAR,CAAa,kDAAb;AANC;AAAA;;AAAA;AAAA,cAOS9B,OAAOK,MAPhB;AAAA;AAAA;AAAA;;AAQDW,kBAAQE,IAAR,CAAa,sFAAb;AARC;AAAA;;AAAA;AAUKa,iBAVL,GAUelC,MAAMmC,QAAN,CAAehC,OAAOG,UAAtB,CAVf;;AAAA,cAWI4B,OAXJ;AAAA;AAAA;AAAA;;AAYCf,kBAAQE,IAAR,CAAa,2BAAb,EAA0ClB,OAAOG,UAAjD;AAZD;AAAA;;AAAA;AAAA,gBAcK4B,QAAQE,OAAR,KAAoB,SAdzB;AAAA;AAAA;AAAA;;AAAA,iDAeiB3B,OAfjB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeY4B,WAfZ;AAgBW1B,mBAhBX,GAgBuBF,QAAQ4B,CAAR,CAhBvB;AAAA;AAAA,iBAiBW,oBAAKzC,oBAAL,EAA2BsC,QAAQxB,WAAnC,EAAgDP,OAAOG,UAAvD,EAAmEK,SAAnE,EAA8ER,OAAOK,MAArF,CAjBX;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyBA,SAAUb,WAAV;AACL;;AADK;;AAAA;AAAA;AAAA;AAAA;AAAA,eAEE,IAFF;AAAA;AAAA;AAAA;;AAAA;AAAA,iBAGoB,sBAAO,UAAP,CAHpB;;AAAA;AAGGH,mBAHH;AAAA;AAAA,iBAIoB,sBAAO,UAAP,CAJpB;;AAAA;AAIG2C,kBAJH;AAAA;AAAA,iBAKkB,sBAAO,QAAP,CALlB;;AAAA;AAKGG,gBALH;AAMCJ,iBAND,GAMWC,SAAS3C,UAASc,UAAlB,CANX;AAAA;AAQGiC,uBARH,GAQmB,EARnB;AAAA;;AAUC,4BAAK1B,iBAAL,CAAuBqB,QAAQxB,WAA/B;AAVD;AAAA,iBAWuB,kBAAK8B,IAAL,CAAUhD,UAASe,aAAnB,EAAkC,IAAlC,CAXvB;;AAAA;AAWCgC,uBAXD;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAaCpB,kBAAQC,GAAR;;AAbD;AAAA,eAeGmB,cAAcE,MAfjB;AAAA;AAAA;AAAA;;AAAA;AAAA,iBAgBiB,kBAAKC,QAAL,CAAcH,cAAcE,MAA5B,EAAoC,GAApC,CAhBjB;;AAAA;AAgBKE,aAhBL;;AAiBCxB,kBAAQC,GAAR,CAAYuB,GAAZ;;AAjBD,eAkBKA,IAAIC,OAlBT;AAAA;AAAA;AAAA;;AAAA;AAAA,iBAmBe,kBAAKC,YAAL,CAAkBN,cAAcE,MAAhC,CAnBf;;AAAA;AAmBGE,aAnBH;AAoBYG,WApBZ,GAoBgB,CApBhB;;AAAA;AAAA,gBAoBmBA,IAAIH,IAAII,QAAJ,CAAaC,MApBpC;AAAA;AAAA;AAAA;;AAAA;AAAA,iBAqBW,wBAAS,EAAC5C,MAAM,aAAP,EAAsB6C,QAAQN,IAAII,QAAJ,CAAaD,CAAb,EAAgBvB,EAA9C,EAAT,CArBX;;AAAA;AAoB4CuB,aApB5C;AAAA;AAAA;;AAAA;AAAA,eAwBKH,IAAIO,OAxBT;AAAA;AAAA;AAAA;;AAAA;AAAA,iBAyBS,qCAAYP,IAAIO,OAAhB,CAzBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,iBA2BS,qCAAY,KAAZ,CA3BT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA+BD/B,kBAAQE,IAAR;AA/BC;AAAA,iBAgCK,qCAAY,KAAZ,CAhCL;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","file":"postList.js","sourcesContent":["/** Created by ge on 4/18/16. */\nimport {dropboxAccountKey, dropboxDateStringToIntDate} from \"./accounts/accounts\";\nimport dapi from \"../modules/dropbox\";\nimport {createPost, PULL_POST_FROM_SERVICE} from \"./posts/posts\";\nimport {take, dispatch, call} from \"luna-saga\";\nimport {select, delay} from \"luna-saga\";\n\nexport const ORDER_POSTS_BY = \"ORDER_POSTS_BY\";\nexport const UPDATE_SEARCH_QUERY = \"UPDATE_SEARCH_QUERY\";\nexport const SET_CURRENT_FOLDER = \"SET_CURRENT_FOLDER\";\n\nexport function postList(state = {orderBy: \"modifiedAt\", searchQuery: \"\"}, action) {\n  if (action.type === ORDER_POSTS_BY) {\n    return {...state, orderBy: action.orderBy};\n  } else if (action.type === UPDATE_SEARCH_QUERY) {\n    return {...state, searchQuery: action.query};\n  } else if (action.type === SET_CURRENT_FOLDER) {\n    return {\n      ...state,\n      /* enforce the clearing of searchQuery. */\n      searchQuery: \"\",\n      accountKey: (typeof action.accountKey !== \"undefined\") ? action.accountKey : state.accountKey,\n      //reminder: [Call this `currentFolder`, because it is easier to change by *replace*] should this be called `currentFolder`, or parentFolder?\n      currentFolder: (typeof action.folder !== \"undefined\") ? action.folder : state.folder\n    };\n  } else {\n    return state;\n  }\n}\n\n// action creator\nexport function setCurrentFolder(accountKey, folder) {\n  \"use strict\";\n  return {\n    type: SET_CURRENT_FOLDER,\n    accountKey,\n    folder\n  };\n}\n\nlet QUERIES = [\"*.md\", \"*.ink\", \"*.url\", \"*.txt\", \"*.doc\", \"*.pdf\"];\n\nfunction* listFilesByExtension(accessToken, accountKey, extension, parentFolder) {\n  dapi.updateAccessToken(accessToken);\n  let searchResponse = yield dapi.search(extension, parentFolder, 0, 100, \"filename\");\n\n  if (searchResponse.matches) {\n    for (let ind in searchResponse.matches) {\n      const metadata = searchResponse.matches[ind].metadata;\n      if (metadata) {\n        console.log(\"metadata is\", metadata);\n      } else {\n        console.warn('metadata is not defined.', searchResponse.matches[ind]);\n      }\n      const {type, post} = createPost();\n      const {id, name: title, path_display: parentFolder} = metadata;\n      const modifiedAt = dropboxDateStringToIntDate(metadata.client_modified || metadata.server_modified);\n      yield dispatch({\n        type,\n        post: {\n          ...post,\n          // done: local post id is inconsistent with dropbox id.\n          id,\n          title,\n          parentFolder: parentFolder.split('/').slice(0, -1).join('/'),\n          modifiedAt,\n          accountKey: accountKey\n        }\n      });\n    }\n  }\n}\n\nexport function* onSetCurrentFolder() {\n  \"use strict\";\n  while (true) {\n    let {state, action} = yield take(SET_CURRENT_FOLDER);\n    if (!action.accountKey) {\n      //notice: accountKey is not defined when at root\n      console.info('accountKey is undefined. Do not download folder.');\n    } else if (!action.folder) {\n      console.warn('reached root folder, do NOT download search result here since there will be too many');\n    } else {\n      const account = state.accounts[action.accountKey];\n      if (!account) {\n        console.warn(\"account not found by key:\", action.accountKey);\n      } else {\n        if (account.service === \"dropbox\") {\n          for (let k in QUERIES) {\n            const extension = QUERIES[k];\n            yield call(listFilesByExtension, account.accessToken, action.accountKey, extension, action.folder);\n          }\n        }\n      }\n    }\n  }\n}\n\nexport function* watchFolder() {\n  \"use strict\";\n  while (true) {\n    const postList = yield select('postList');\n    const accounts = yield select('accounts');\n    const editor = yield select('editor');\n    let account = accounts[postList.accountKey];\n    try {\n      let list_response = {};\n      try {\n        dapi.updateAccessToken(account.accessToken);\n        list_response = yield dapi.list(postList.currentFolder, true);\n      } catch (e) {\n        console.log(e);\n      }\n      if (list_response.cursor) {\n        let res = yield dapi.listFeed(list_response.cursor, 480);\n        console.log(res);\n        if (res.changes) {\n          res = yield dapi.listContinue(list_response.cursor);\n          for (let i = 0; i < res.entities.length; i++) {\n            yield dispatch({type: \"SELECT_POST\", postId: res.entities[i].id});\n          }\n        }\n        if (res.backoff) {\n          yield call(delay, res.backoff);\n        } else {\n          yield call(delay, 10000);\n        }\n      }\n    } catch (e) {\n      console.warn(e);\n      yield call(delay, 10000);\n    }\n  }\n}\n"]}