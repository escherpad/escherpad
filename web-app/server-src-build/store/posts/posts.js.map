{"version":3,"sources":["../../../src/store/posts/posts.js"],"names":["presence","post","posts","createPost","addAccountToPostProc","fileIsBlackListed","fileIsWhiteListedForUpload","extensionSupportPreview","dehydrateForUpload","hydrateAfterDownload","pushPost","pullPostFromService","ADD_POST","UPDATE_POST","UPDATE_POST_PRESENCE","DELETE_POST","OVERWRITE_POST","state","action","type","id","_v","_v0","$updatedId","_post","newPost","undefined","newState","indexOf","thisPost","updatedPost","mimeType","accountKey","parentFolder","createdAt","Date","now","modifiedAt","$NO_PUST_TO_SERVICE","ADD_ACCOUNT_TO_POST","title","match","source","JSON","stringify","parse","e","PUSH_POST_TO_SERVICE","oldPosts","accounts","postFromState","console","warn","account","accessToken","updateAccessToken","metadata","oldPost","upload","move","log","PULL_POST_FROM_SERVICE","postId","response","getPreview","downloadBlob","blob","Blob","newAction","previewURL","URL","createObjectURL","download","name","path_display","split","slice","join","content"],"mappings":";;;;;;;kQAAA;;;QAcgBA,Q,GAAAA,Q;QAKAC,I,GAAAA,I;QAqCAC,K,GAAAA,K;QAiCAC,U,GAAAA,U;QAqBCC,oB,GAAAA,oB;QAQDC,iB,GAAAA,iB;QAIAC,0B,GAAAA,0B;QAKAC,uB,GAAAA,uB;QAIAC,kB,GAAAA,kB;QASAC,oB,GAAAA,oB;QAaCC,Q,GAAAA,Q;QAsEAC,mB,GAAAA,mB;;AA9NjB;;AACA;;AACA;;AACA;;;;;;mDA0GiBP,oB;oDA2CAM,Q;oDAsEAC,mB;;;;;;AAxNV,IAAMC,8BAAW,UAAjB;AACA,IAAMC,oCAAc,aAApB;AACA,IAAMC,sDAAuB,sBAA7B;AACA,IAAMC,oCAAc,aAApB;AACP;AACO,IAAMC,0CAAiB,gBAAvB;;AAEA,SAAShB,QAAT,GAAsC;AAAA,QAApBiB,KAAoB,uEAAZ,EAAY;AAAA,QAARC,MAAQ;;AACzC,QAAIA,OAAOjB,IAAP,IAAeiB,OAAOjB,IAAP,CAAYD,QAA/B,EAAyC,oBAAWiB,KAAX,EAAqBC,OAAOjB,IAAP,CAAYD,QAAjC,EAAzC,KACK,OAAOiB,KAAP;AACR;;AAEM,SAAShB,IAAT,GAAkC;AAAA,QAApBgB,KAAoB,uEAAZ,EAAY;AAAA,QAARC,MAAQ;;AACrC,QAAI,CAACA,OAAOC,IAAZ,EAAkB;AACd,eAAOF,KAAP;AACH,KAFD,MAEO,IAAIC,OAAOC,IAAP,KAAgBP,QAApB,EAA8B;AACjC,YAAIX,SAAOiB,OAAOjB,IAAlB;AACA,YAAI,CAACA,MAAD,IAAS,CAACA,OAAKmB,EAAnB,EAAuB;AACvB,0BAAQC,IAAI,CAAZ,EAAeC,KAAK,CAApB,IAA0BJ,OAAOjB,IAAjC;AACH,KAJM,MAIA,IAAIiB,OAAOC,IAAP,KAAgBN,WAApB,EAAiC;AACpC,YAAII,MAAMG,EAAN,KAAaF,OAAOjB,IAAP,CAAYmB,EAA7B,EAAiC,OAAOH,KAAP;;AADG,2BAEDC,OAAOjB,IAFN;AAAA,YAE7BsB,UAF6B,gBAE7BA,UAF6B;AAAA,YAEjBF,EAFiB,gBAEjBA,EAFiB;AAAA,YAEVG,KAFU;;AAGpC,YAAIC,uBACGR,KADH,EAEGO,KAFH;AAGAxB,sBAAUA,SAASiB,MAAMjB,QAAf,EAAyBkB,MAAzB,CAHV;AAIAG,gBAAI,OAAOA,EAAP,IAAa,WAAb,GAA4BJ,MAAMI,EAAN,GAAW,CAAvC,GAA4CA,EAJhD,CAImD;AAJnD,UAAJ;AAMA,YAAIE,UAAJ,EAAgBE,QAAQL,EAAR,GAAaG,UAAb;AAChB,eAAOE,OAAP;AACH,KAXM,MAWA,IAAIP,OAAOC,IAAP,KAAgBH,cAApB,EAAoC;AACvC,YAAIC,MAAMG,EAAN,KAAaF,OAAOjB,IAAP,CAAYmB,EAA7B,EAAiC,OAAOH,KAAP;;AADM,4BAEJC,OAAOjB,IAFH;AAAA,YAEhCsB,WAFgC,iBAEhCA,UAFgC;AAAA,YAEpBF,GAFoB,iBAEpBA,EAFoB;AAAA,YAEbG,MAFa;;AAGvC,YAAIC,wBACGD,MADH;AAEAxB,sBAAUA,SAASiB,MAAMjB,QAAf,EAAyBkB,MAAzB,CAFV;AAGAG,gBAAI,OAAOA,GAAP,IAAa,WAAb,GAA4BJ,MAAMI,EAAN,GAAW,CAAvC,GAA4CA;AAHhD,UAAJ;AAKA,eAAOI,QAAP;AACH,KATM,MASA,IAAIP,OAAOC,IAAP,KAAgBL,oBAApB,EAA0C;AAAE;AAC/C,YAAIG,MAAMG,EAAN,KAAaF,OAAOjB,IAAP,CAAYmB,EAA7B,EAAiC,OAAOH,KAAP;AACjC,4BACOA,KADP,IACcjB,UAAUA,SAASiB,MAAMjB,QAAf,EAAyBkB,MAAzB;AADxB;AAGH,KALM,MAKA;AACH,eAAOD,KAAP;AACH;AACJ;;AAEM,SAASf,KAAT,GAAmC;AAAA,QAApBe,KAAoB,uEAAZ,EAAY;AAAA,QAARC,MAAQ;;AACtC,QAAI,CAACA,OAAOC,IAAZ,EAAkB,OAAOF,KAAP;AAClB,QAAIC,OAAOC,IAAP,KAAgBP,QAApB,EAA8B;AAC1B,YAAIa,UAAUxB,KAAKyB,SAAL,EAAgBR,MAAhB,CAAd;AACA,YAAI,CAACO,OAAL,EAAc,OAAOR,KAAP,CAAd,KACK;AACD,gBAAIU,wBAAeV,KAAf,CAAJ;AACAU,qBAASF,QAAQL,EAAjB,IAAuBK,OAAvB;AACA,mBAAOE,QAAP;AACH;AACJ,KARD,MAQO,IAAI,CAACd,WAAD,EAAcC,oBAAd,EAAoCE,cAApC,EAAoDY,OAApD,CAA4DV,OAAOC,IAAnE,IAA2E,CAAC,CAAhF,EAAmF;AACtF;AACA,YAAMU,WAAWZ,MAAMC,OAAOjB,IAAP,CAAYmB,EAAlB,CAAjB;AACA,YAAI,CAACS,QAAL,EAAe,OAAOZ,KAAP;AACf,YAAIa,cAAc7B,KAAK4B,QAAL,EAAeX,MAAf,CAAlB;AACA,YAAIY,eAAeD,QAAnB,EAA6B,OAAOZ,KAAP;AAC7B,YAAIU,yBACGV,KADH,sBAECC,OAAOjB,IAAP,CAAYsB,UAAZ,IAA0BO,YAAYV,EAFvC,EAE4CU,WAF5C,EAAJ;AAIA,YAAIZ,OAAOjB,IAAP,CAAYsB,UAAhB,EAA4B,OAAOI,UAAST,OAAOjB,IAAP,CAAYmB,EAArB,CAAP;AAC5B,eAAOO,SAAP;AACH,KAZM,MAYA,IAAIT,OAAOC,IAAP,KAAgBJ,WAApB,EAAiC;AACpC,YAAMc,YAAWZ,MAAMC,OAAOE,EAAb,CAAjB;AACA,YAAI,CAACS,SAAL,EAAe,OAAOZ,KAAP;AACf,YAAIU,0BAAeV,KAAf,CAAJ;AACA,eAAOU,WAAST,OAAOE,EAAhB,CAAP;AACA,eAAOO,UAAP;AACH,KANM,MAMA;AACH,eAAOV,KAAP;AACH;AACJ;;AAEM,SAASd,UAAT,CAAoB4B,QAApB,EAA8BC,UAA9B,EAA0CC,YAA1C,EAAwD;AAC3D,QAAIf,SAAS;AACTC,cAAMP,QADG;AAETX,cAAM;AACFmB,gBAAI,mBADF;AAEFc,uBAAWC,KAAKC,GAAL,EAFT;AAGFC,wBAAYF,KAAKC,GAAL;AAHV;AAFG,KAAb;AAQA,QAAIL,QAAJ,EAAcb,OAAOjB,IAAP,CAAY8B,QAAZ,GAAuBA,QAAvB;AACd,QAAIC,cAAc,OAAOC,YAAP,KAAwB,WAA1C,EAAuD;AACnDf,eAAOjB,IAAP,CAAY+B,UAAZ,GAAyBA,UAAzB;AACAd,eAAOjB,IAAP,CAAYgC,YAAZ,GAA2BA,YAA3B;AACH;AACD,WAAOf,MAAP;AACH;;AAGM,IAAMoB,oDAAsB,qBAA5B;AACA,IAAMC,oDAAsB,qBAA5B;;AAEA,SAAUnC,oBAAV;AACH;;AADG;;AAAA;AAAA;AAAA;AAAA;AAAA,yBAEI,IAFJ;AAAA;AAAA;AAAA;;AAAA;AAAA,2BAG+B,oBAAKmC,mBAAL,CAH/B;;AAAA;AAAA;AAGQtB,yBAHR,QAGQA,KAHR;AAGeC,0BAHf,QAGeA,MAHf;AAAA;AAAA,2BAIO,wBAAS,EAACC,MAAMN,WAAP,EAAoBZ,MAAMiB,OAAOjB,IAAjC,EAAT,CAJP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,SAASI,iBAAT,GAAuC;AAAA,QAAZmC,KAAY,uEAAJ,EAAI;;AAC1C,WAAQA,MAAMC,KAAN,CAAY,qBAAZ,CAAR;AACH;;AAEM,SAASnC,0BAAT,GAAgD;AAAA,QAAZkC,KAAY,uEAAJ,EAAI;;AACnD;AACA,WAAQA,MAAMC,KAAN,CAAY,iBAAZ,CAAR;AACH;;AAEM,SAASlC,uBAAT,GAA6C;AAAA,QAAZiC,KAAY,uEAAJ,EAAI;;AAChD,WAAQA,MAAMC,KAAN,CAAY,YAAZ,CAAR;AACH;;AAEM,SAASjC,kBAAT,CAA4BkC,MAA5B,EAAoC;AACvC;;AACA,QAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC5B,eAAOA,MAAP;AACH,KAFD,MAEO;AACH,eAAOC,KAAKC,SAAL,CAAeF,MAAf,CAAP;AACH;AACJ;;AAEM,SAASjC,oBAAT,CAA8BiC,MAA9B,EAAsC;AACzC;;AACA,QAAI;AACA,eAAOC,KAAKE,KAAL,CAAWH,MAAX,CAAP;AACH,KAFD,CAEE,OAAOI,CAAP,EAAU;AACR,eAAOJ,MAAP;AACH;AACJ;;AAED;AACA;AACO,IAAMK,sDAAuB,sBAA7B;;AAEA,SAAUrC,QAAV;AACH;;AADG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAEkB,sBAAO,OAAP,CAFlB;;AAAA;AAECsC,4BAFD;;AAAA;AAAA,yBAGI,IAHJ;AAAA;AAAA;AAAA;;AAAA;AAAA,2BAM+B,oBAAKnC,WAAL,CAN/B;;AAAA;AAAA;AAMQI,0BANR,SAMQA,KANR;AAMeC,2BANf,SAMeA,MANf;AAOQ+B,4BAPR,GAOoBhC,MAPpB,CAOQgC,QAPR;AAQKC,iCARL,GAQqBjC,OAAMf,KAAN,CAAYgB,QAAOjB,IAAP,CAAYmB,EAAxB,CARrB;;AAAA,0BASKF,QAAOoB,mBAAP,KAA+BjC,kBAAkBa,QAAOjB,IAAP,CAAYuC,KAAZ,IAAqBU,cAAcV,KAArD,CATpC;AAAA;AAAA;AAAA;;AAUKW,4BAAQC,IAAR,CAAa,gCAAb;AAVL;AAAA;;AAAA;AAAA,yBAWY9C,2BAA2BY,QAAOjB,IAAP,CAAYuC,KAAZ,IAAqBU,cAAcV,KAA9D,CAXZ;AAAA;AAAA;AAAA;;AAYSa,2BAZT,GAYmBpC,OAAMgC,QAAN,CAAeC,cAAclB,UAA7B,CAZnB;;AAAA,yBAaS,oCAAoBkB,cAAclB,UAAlC,EAA8C,SAA9C,CAbT;AAAA;AAAA;AAAA;;AAcasB,+BAdb,GAc2BD,QAAQC,WAdnC;;AAeS,sCAAKC,iBAAL,CAAuBD,WAAvB;AAfT;;AAiBa;AACA;AACIE,4BAnBjB;AAoBiBC,2BApBjB,GAoB2BT,SAAS9B,QAAOjB,IAAP,CAAYmB,EAArB,CApB3B;AAqBa;AACA;AACA;;AAvBb;AAAA,2BAwB8B,sBAAO,OAAP,CAxB9B;;AAAA;AAwBa4B,4BAxBb;;AAAA,wBAyBkBS,OAzBlB;AAAA;AAAA;AAAA;;AAAA;AAAA,2BA0BkC,kBAAKC,MAAL,CAAYR,cAAcjB,YAAd,GAA6B,GAA7B,GAAmCiB,cAAcV,KAA7D,EAAoEhC,mBAAmB0C,cAAcR,MAAjC,CAApE,EAA8G,WAA9G,EAA2H,KAA3H,EAAkI,KAAlI,EAAyI,6CAA6BQ,cAAcb,UAA3C,CAAzI,CA1BlC;;AAAA;AA0BiBmB,4BA1BjB;AAAA;AAAA;;AAAA;AAAA,0BAgCqBtC,QAAOjB,IAAP,CAAYuC,KAAZ,IAAqBiB,QAAQjB,KAAR,KAAkBU,cAAcV,KAhC1E;AAAA;AAAA;AAAA;;AAAA;AAAA,2BAiCsC,kBAAKmB,IAAL,CACbF,QAAQxB,YAAR,GAAuB,GAAvB,GAA6BwB,QAAQjB,KADxB,EAEbU,cAAcjB,YAAd,GAA6B,GAA7B,GAAmCiB,cAAcV,KAFpC,EAE2C,WAF3C,EAEwD,KAFxD,EAE+D,KAF/D,CAjCtC;;AAAA;AAiCqBgB,4BAjCrB;;AAAA;AAAA,0BAsCsB,OAAOtC,QAAOjB,IAAP,CAAYyC,MAAnB,KAA8B,WAA9B,IAA6CxB,QAAOjB,IAAP,CAAYyC,MAAZ,KAAuBe,QAAQf,MAA7E,IACC,OAAOe,QAAQzB,UAAf,KAA8B,WAA9B,IAA6C,OAAOd,QAAOjB,IAAP,CAAY+B,UAAnB,KAAkC,SAvCrG;AAAA;AAAA;AAAA;;AAyCqBmB,4BAAQS,GAAR,CAAY,mBAAZ;AAzCrB;AAAA,2BA0CsC,kBACZF,MADY,CACLR,cAAcjB,YAAd,GAA6B,GAA7B,GAAmCiB,cAAcV,KAD5C,EAEThC,mBAAmB0C,cAAcR,MAAjC,CAFS,EAGT,WAHS,EAGI,KAHJ,EAGW,KAHX,EAGkB,6CAA6BQ,cAAcb,UAA3C,CAHlB,CA1CtC;;AAAA;AA0CqBmB,4BA1CrB;;AAAA;AAAA,0BAiDiBA,YAAYA,SAASpC,EAAT,KAAgBF,QAAOjB,IAAP,CAAYmB,EAjDzD;AAAA;AAAA;AAAA;;AAAA;AAAA,2BAkDuB;AACFD,8BAAMN;AADJ,kDAEDyB,mBAFC,EAEqB,IAFrB,sCAGI;AACFlB,4BAAIF,QAAOjB,IAAP,CAAYmB,EADd;AAEFG,oCAAYiC,SAASpC;AAFnB,qBAHJ,cAlDvB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA2Da+B,4BAAQC,IAAR,CAAa,yBAAb;;AA3Db;AAAA;AAAA,2BAgEO,qCAAY,GAAZ,CAhEP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoEA,IAAMS,0DAAyB,wBAA/B;;AAEA,SAAUlD,mBAAV;AACH;AACA;;AAFG;;AAAA;AAAA;AAAA;AAAA;AAAA,yBAGI,IAHJ;AAAA;AAAA;AAAA;;AAAA;AAAA,2BAI+B,oBAAK,CAACkD,sBAAD,EAAyB,aAAzB,CAAL,CAJ/B;;AAAA;AAAA;AAIQ5C,2BAJR,SAIQA,KAJR;AAIeC,4BAJf,SAIeA,MAJf;AAKQ+B,6BALR,GAKoBhC,OALpB,CAKQgC,QALR;AAMQa,0BANR,GAMkB5C,QANlB,CAMQ4C,MANR;AAOOtC,yBAPP,GAOeP,QAAMf,KAAN,CAAY4D,MAAZ,CAPf;AAQKT,2BARL,GAQepC,QAAMgC,QAAN,CAAezB,MAAMQ,UAArB,CARf;;AAAA,0BASK,CAACqB,OAAD,IAAY,CAAC7B,MAAMQ,UAAnB,IAAiC,CAAC,4BAAY8B,MAAZ,CATvC;AAAA;AAAA;AAAA;;AAUKX,4BAAQC,IAAR,CAAa,sFACT,wDADJ;AAVL;AAAA;;AAAA;AAaSE,+BAbT,GAauBD,QAAQC,WAb/B;;AAAA,yBAcSjD,kBAAkBmB,MAAMgB,KAAxB,CAdT;AAAA;AAAA;AAAA;;AAAA,yBAea,oCAAoBhB,MAAMQ,UAA1B,EAAsC,SAAtC,CAfb;AAAA;AAAA;AAAA;;AAgBa,sCAAKuB,iBAAL,CAAuBD,WAAvB;AAhBb;AAkBqBS,4BAlBrB;;AAAA,yBAmBqBxD,wBAAwBiB,MAAMgB,KAA9B,CAnBrB;AAAA;AAAA;AAAA;;AAAA;AAAA,2BAoBsC,kBAAKwB,UAAL,CAAgBxC,MAAMJ,EAAN,IAAYI,MAAMS,YAAN,GAAqB,GAArB,GAA2BT,MAAMgB,KAA7D,CApBtC;;AAAA;AAoBqBuB,4BApBrB;AAAA;AAAA;;AAAA;AAAA;AAAA,2BAsBsC,kBAAKE,YAAL,CAAkBzC,MAAMJ,EAAN,IAAYI,MAAMS,YAAN,GAAqB,GAArB,GAA2BT,MAAMgB,KAA/D,CAtBtC;;AAAA;AAsBqBuB,4BAtBrB;;AAuBqBA,6BAASG,IAAT,GAAgB,IAAIC,IAAJ,CAAS,CAACJ,SAASG,IAAV,CAAT,EAA0B,EAAC/C,MAAM,iBAAP,EAA1B,CAAhB;AACAgC,4BAAQS,GAAR,CAAYG,SAASG,IAArB;;AAxBrB;AA0BqBE,6BA1BrB;AA2BqBjD,8BAAMN;AA3B3B,mDA4BsByB,mBA5BtB,EA4B4C,IA5B5C,uCA6B2B;AACFlB,4BAAI0C,MADF;AAEFO,oCAAYC,IAAIC,eAAJ,CAAoBR,SAASG,IAA7B,CAFV,CAE4C;AAF5C,qBA7B3B;;AAkCiB,wBAAIH,SAASP,QAAT,IAAqBO,SAASP,QAAT,CAAkBpC,EAAlB,KAAyB0C,MAAlD,EAA0DM,UAAUnE,IAAV,CAAesB,UAAf,GAA4BwC,SAASP,QAAT,CAAkBpC,EAA9C;AAlC3E;AAAA,2BAmCuB,wBAASgD,SAAT,CAnCvB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAqCiBjB,4BAAQC,IAAR,CAAa,yBAAb;;AArCjB;AAAA;AAAA;;AAAA;AAAA,yBAyCa,oCAAoB5B,MAAMQ,UAA1B,EAAsC,SAAtC,CAzCb;AAAA;AAAA;AAAA;;AA0Ca,sCAAKuB,iBAAL,CAAuBD,WAAvB;AA1Cb;AAAA;AAAA,2BA6CsC,kBAAKkB,QAAL,CACjB,4BAAYV,MAAZ,IAAsBA,MAAtB,GAA+BtC,MAAMS,YAAN,GAAqB,GAArB,GAA2BT,MAAMgB,KAD/C,CA7CtC;;AAAA;AA6CqBuB,6BA7CrB;AAgDqBP,4BAhDrB,GAgDgCO,UAASP,QAhDzC;;AAiDiBL,4BAAQS,GAAR,CAAY,+BAAZ,EAA6CJ,QAA7C;AACOpC,sBAlDxB,GAkDuEoC,QAlDvE,CAkDwBpC,EAlDxB,EAkDkCoB,KAlDlC,GAkDuEgB,QAlDvE,CAkD4BiB,IAlD5B,EAkDuDxC,YAlDvD,GAkDuEuB,QAlDvE,CAkDyCkB,YAlDzC;AAmDqBN,+BAnDrB;AAoDqBjD,8BAAMN;AApD3B,oDAqDsByB,mBArDtB,EAqD4C,IArD5C,wCAsD2B;AACFlB,4BAAI0C,MADF;AAEFtB,oCAFE;AAGFP,sCAAcA,aAAa0C,KAAb,CAAmB,GAAnB,EAAwBC,KAAxB,CAA8B,CAA9B,EAAiC,CAAC,CAAlC,EAAqCC,IAArC,CAA0C,GAA1C,CAHZ;AAIFnC,gCAAQjC,qBAAqBsD,UAASe,OAA9B;AAJN,qBAtD3B;;AA6DiB,wBAAIf,UAASP,QAAT,CAAkBpC,EAAlB,KAAyB0C,MAA7B,EAAqCM,YAAUnE,IAAV,CAAesB,UAAf,GAA4BwC,UAASP,QAAT,CAAkBpC,EAA9C;AA7DtD;AAAA,2BA8DuB,wBAASgD,WAAT,CA9DvB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAgEiBjB,4BAAQC,IAAR,CAAa,0BAAb;;AAhEjB;AAAA;AAAA,2BAqEO,qCAAY,GAAZ,CArEP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","file":"posts.js","sourcesContent":["/** Created by ge on 4/7/16. */\nimport {$uuid} from '../../lib/$uuid';\nimport {accountKeyIsService, isDropboxId, unixEpochToDropboxDateString} from \"../accounts/accounts\";\nimport {select, take, delay, call, dispatch} from \"luna-saga\";\nimport dapi from \"../../modules/dropbox\";\n\n\nexport const ADD_POST = \"ADD_POST\";\nexport const UPDATE_POST = \"UPDATE_POST\";\nexport const UPDATE_POST_PRESENCE = \"UPDATE_POST_PRESENCE\";\nexport const DELETE_POST = \"DELETE_POST\";\n// export const MERGE_POST = \"MERGE_POST\";\nexport const OVERWRITE_POST = \"OVERWRITE_POST\";\n\nexport function presence(state = {}, action) {\n    if (action.post && action.post.presence) return {...state, ...action.post.presence};\n    else return state;\n}\n\nexport function post(state = {}, action) {\n    if (!action.type) {\n        return state;\n    } else if (action.type === ADD_POST) {\n        let post = action.post;\n        if (!post || !post.id) return;\n        return {_v: 0, _v0: 0, ...action.post}\n    } else if (action.type === UPDATE_POST) {\n        if (state.id !== action.post.id) return state;\n        const {$updatedId, _v, ..._post} = action.post;\n        let newPost = {\n            ...state,\n            ..._post,\n            presence: presence(state.presence, action),\n            _v: typeof _v == 'undefined' ? (state._v + 1) : _v //note: allow the editor to override this.\n        };\n        if ($updatedId) newPost.id = $updatedId;\n        return newPost\n    } else if (action.type === OVERWRITE_POST) {\n        if (state.id !== action.post.id) return state;\n        const {$updatedId, _v, ..._post} = action.post;\n        let newPost = {\n            ..._post,\n            presence: presence(state.presence, action),\n            _v: typeof _v == 'undefined' ? (state._v + 1) : _v\n        };\n        return newPost;\n    } else if (action.type === UPDATE_POST_PRESENCE) { // does not update the version number\n        if (state.id !== action.post.id) return state;\n        return {\n            ...state, presence: presence(state.presence, action)\n        }\n    } else {\n        return state;\n    }\n}\n\nexport function posts(state = {}, action) {\n    if (!action.type) return state;\n    if (action.type === ADD_POST) {\n        let newPost = post(undefined, action);\n        if (!newPost) return state;\n        else {\n            let newState = {...state};\n            newState[newPost.id] = newPost;\n            return newState;\n        }\n    } else if ([UPDATE_POST, UPDATE_POST_PRESENCE, OVERWRITE_POST].indexOf(action.type) > -1) {\n        //done: update the key of post in posts collection when file id has changed.\n        const thisPost = state[action.post.id];\n        if (!thisPost) return state;\n        let updatedPost = post(thisPost, action);\n        if (updatedPost == thisPost) return state;\n        let newState = {\n            ...state,\n            [action.post.$updatedId || updatedPost.id]: updatedPost\n        };\n        if (action.post.$updatedId) delete newState[action.post.id];\n        return newState;\n    } else if (action.type === DELETE_POST) {\n        const thisPost = state[action.id];\n        if (!thisPost) return state;\n        let newState = {...state};\n        delete newState[action.id];\n        return newState;\n    } else {\n        return state;\n    }\n}\n\nexport function createPost(mimeType, accountKey, parentFolder) {\n    let action = {\n        type: ADD_POST,\n        post: {\n            id: $uuid(),\n            createdAt: Date.now(),\n            modifiedAt: Date.now(),\n        }\n    };\n    if (mimeType) action.post.mimeType = mimeType;\n    if (accountKey && typeof parentFolder !== \"undefined\") {\n        action.post.accountKey = accountKey;\n        action.post.parentFolder = parentFolder;\n    }\n    return action;\n}\n\n\nexport const $NO_PUST_TO_SERVICE = \"$NO_PUSH_TO_SERVICE\";\nexport const ADD_ACCOUNT_TO_POST = \"ADD_ACCOUNT_TO_POST\";\n\nexport function* addAccountToPostProc() {\n    \"use strict\";\n    while (true) {\n        const {state, action} = yield take(ADD_ACCOUNT_TO_POST);\n        yield dispatch({type: UPDATE_POST, post: action.post});\n    }\n}\n\nexport function fileIsBlackListed(title = \"\") {\n    return (title.match(/\\.(docx?|png|pdf)$/i));\n}\n\nexport function fileIsWhiteListedForUpload(title = \"\") {\n    //todo: add url to this list *after* adding editor view with built-in iframe preview.\n    return (title.match(/\\.(md|txt|ink)$/));\n}\n\nexport function extensionSupportPreview(title = \"\") {\n    return (title.match(/\\.(docx?)$/));\n}\n\nexport function dehydrateForUpload(source) {\n    \"use strict\";\n    if (typeof source === \"string\") {\n        return source\n    } else {\n        return JSON.stringify(source);\n    }\n}\n\nexport function hydrateAfterDownload(source) {\n    \"use strict\";\n    try {\n        return JSON.parse(source);\n    } catch (e) {\n        return source;\n    }\n}\n\n//done: move `postPost` to proper place\n//resolved: can NOT push (upload) post by post.id. Post.id are only used in pulling.\nexport const PUSH_POST_TO_SERVICE = \"PUSH_POST_TO_SERVICE\";\n\nexport function* pushPost() {\n    \"use strict\";\n    let oldPosts = yield select('posts');\n    while (true) {\n        //todo: use MERGE_POST type instead?\n        //reminder: race condition when switching between different posts, updates gets ignored.\n        const {state, action} = yield take(UPDATE_POST);\n        const {accounts} = state;\n        let postFromState = state.posts[action.post.id];\n        if (action[$NO_PUST_TO_SERVICE] || fileIsBlackListed(action.post.title || postFromState.title)) {\n            console.warn(\"file update has been prevented\");\n        } else if (fileIsWhiteListedForUpload(action.post.title || postFromState.title)) {\n            let account = state.accounts[postFromState.accountKey];\n            if (accountKeyIsService(postFromState.accountKey, \"dropbox\")) {\n                let accessToken = account.accessToken;\n                dapi.updateAccessToken(accessToken);\n                try {\n                    // note: saga is single threaded. If it hangs here, it will not\n                    // take on more \"UPDATE_POST\" events.\n                    let metadata;\n                    let oldPost = oldPosts[action.post.id];\n                    // note: it is really important that this take happens **right** before the async request, to save snapshot.\n                    // todo: need error handling in case upload/move fails.\n                    // todo: add progress bar to editor.\n                    oldPosts = yield select('posts');\n                    if (!oldPost) {\n                        metadata = yield dapi.upload(postFromState.parentFolder + '/' + postFromState.title, dehydrateForUpload(postFromState.source), \"overwrite\", false, false, unixEpochToDropboxDateString(postFromState.modifiedAt));\n                    } else {\n                        //fixed: somehow, exception thrown here from the api call promise is 1. not properly caught. 2. stops further\n                        //done: use id:<file_id> as the parentFolder, make sure `post.id` is dropbox id.\n                        //backlog: use collaboration to make sure the correct version is saved.\n                        //notice: we assume that only one of the title and the content are changed.\n                        if (action.post.title && oldPost.title !== postFromState.title) {\n                            metadata = yield dapi.move(\n                                oldPost.parentFolder + '/' + oldPost.title,\n                                postFromState.parentFolder + '/' + postFromState.title, \"overwrite\", false, false);\n                        }\n                        if (\n                            (typeof action.post.source !== \"undefined\" && action.post.source !== oldPost.source) ||\n                            (typeof oldPost.accountKey === \"undefined\" && typeof action.post.accountKey === \"defined\")\n                        ) {\n                            console.log('=====> Now upload');\n                            metadata = yield dapi\n                                .upload(postFromState.parentFolder + \"/\" + postFromState.title,\n                                    dehydrateForUpload(postFromState.source),\n                                    \"overwrite\", false, false, unixEpochToDropboxDateString(postFromState.modifiedAt));\n                        }\n                    }\n                    //done: only dispatch new one if the info above is different.\n                    if (metadata && metadata.id !== action.post.id)\n                        yield dispatch({\n                            type: UPDATE_POST,\n                            [$NO_PUST_TO_SERVICE]: true,\n                            post: {\n                                id: action.post.id,\n                                $updatedId: metadata.id\n                            }\n                        });\n                } catch (e) {\n                    console.warn('exception during upload', e);\n                }\n            }\n        }\n\n        yield call(delay, 500);\n    }\n}\n\nexport const PULL_POST_FROM_SERVICE = \"PULL_POST_FROM_SERVICE\";\n\nexport function* pullPostFromService() {\n    \"use strict\";\n    //feature: pull posts with differential synchronization\n    while (true) {\n        const {state, action} = yield take([PULL_POST_FROM_SERVICE, \"SELECT_POST\"]);\n        const {accounts} = state;\n        const {postId} = action;\n        const _post = state.posts[postId];\n        let account = state.accounts[_post.accountKey];\n        if (!account || !_post.accountKey || !isDropboxId(postId)) {\n            console.warn('post does not have accountKey or postId is not dropbox form. This might be occur ' +\n                'because the post has not been uploaded to dropbox yet.');\n        } else {\n            let accessToken = account.accessToken;\n            if (fileIsBlackListed(_post.title)) {\n                if (accountKeyIsService(_post.accountKey, \"dropbox\")) {\n                    dapi.updateAccessToken(accessToken);\n                    try {\n                        let response;\n                        if (extensionSupportPreview(_post.title)) {\n                            response = yield dapi.getPreview(_post.id || _post.parentFolder + \"/\" + _post.title);\n                        } else {\n                            response = yield dapi.downloadBlob(_post.id || _post.parentFolder + \"/\" + _post.title);\n                            response.blob = new Blob([response.blob], {type: \"application/pdf\"});\n                            console.log(response.blob);\n                        }\n                        let newAction = {\n                            type: UPDATE_POST,\n                            [$NO_PUST_TO_SERVICE]: true,\n                            post: {\n                                id: postId,\n                                previewURL: URL.createObjectURL(response.blob)//note: this is a PDF string.\n                            }\n                        };\n                        if (response.metadata && response.metadata.id !== postId) newAction.post.$updatedId = response.metadata.id;\n                        yield dispatch(newAction);\n                    } catch (e) {\n                        console.warn(\"download preview failed\", e);\n                    }\n                }\n            } else {\n                if (accountKeyIsService(_post.accountKey, \"dropbox\")) {\n                    dapi.updateAccessToken(accessToken);\n                    try {\n                        // use id:<file_id> as the parentFolder\n                        let response = yield dapi.download(\n                            isDropboxId(postId) ? postId : _post.parentFolder + '/' + _post.title,\n                        );\n                        let metadata = response.metadata;\n                        console.log(\"pulling request: metadata is:\", metadata);\n                        const {id, name: title, path_display: parentFolder} = metadata;\n                        let newAction = {\n                            type: UPDATE_POST,\n                            [$NO_PUST_TO_SERVICE]: true,\n                            post: {\n                                id: postId,\n                                title,\n                                parentFolder: parentFolder.split('/').slice(0, -1).join('/'),\n                                source: hydrateAfterDownload(response.content)\n                            }\n                        };\n                        if (response.metadata.id !== postId) newAction.post.$updatedId = response.metadata.id;\n                        yield dispatch(newAction);\n                    } catch (e) {\n                        console.warn('exception during pulling', e);\n                    }\n                }\n            }\n        }\n        yield call(delay, 500);\n    }\n\n}\n"]}