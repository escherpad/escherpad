{"version":3,"sources":["../../src/store/index.js"],"names":["reducer","notices","session","editor","viewMode","postList","posts","accounts","editorDropdown","editorDropdownMinor","postSaveModal","accountBrowser","editorConfigModal","_reducer","state","action","type","storage","_storageState","GITTOR_STORE","getStored","store","window","localStorage","getItem","match","JSON","parse","decompress","cachedStore","initialState","__INITIAL_STATE__","rootStore","onstorage","dispatch","bind","update$","subscribe","console","log","serialized","stringify","setItem","e","warn","postCollection","getValue","upgradeDropboxAccount","post","account","newPost","accountKey","setTimeout","upgradeInkFile","title","source","length","config","newSource","presence"],"mappings":"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","file":"index.js","sourcesContent":["/** Created by ge on 3/24/16. */\nimport {Store, combineReducers} from \"luna\";\nimport {sagaConnect} from \"luna-saga\";\n\nimport {notices, noticeProc, createNotification} from \"./notices\";\nimport {viewMode} from \"./viewMode\";\nimport {session} from \"./session\";\nimport {editor} from \"./editor\";\nimport {posts, pushPost, pullPostFromService, addAccountToPostProc} from \"./posts/posts\";\nimport {postList, onSetCurrentFolder, watchFolder} from \"./postList\";\nimport {accounts, getDropboxAccount, dropboxAccountKey} from \"./accounts/accounts\";\nimport {demoInitialState} from \"./demoInitialState\";\nimport ModalReducer from \"../lib/ModalReducer\";\nimport {accountBrowserReducer, onAccountBrowserOpen, accountBrowserListFiles} from \"./accountBrowser\";\n\nimport lz from \"lz-string\";\n\nconst reducer = combineReducers({\n    notices,\n    session,\n    editor,\n    viewMode,\n    // bindrs,\n    postList,\n    posts,\n    accounts,\n    // view states\n    editorDropdown: ModalReducer('editor_dropdown'),\n    editorDropdownMinor: ModalReducer('editor_dropdown_minor'),\n    postSaveModal: ModalReducer('post_save_modal'),\n    accountBrowser: ModalReducer('account_browser', accountBrowserReducer),\n    editorConfigModal: ModalReducer('editor_config_modal')\n});\n\nconst _reducer = function (state, action) {\n    if (action.type === \"STORAGE_UPDATE\") {\n        // we can update the storage selectively, so that some of the view mode state are not propagated across the tabs.\n        const {editor, viewMode, postList, ..._storageState} = action.storage;\n        // shallow patch is nee hoot, because they updates the references disregarding the value.\n        // jsonDiffSync is a better way to figure out the differences and apply the patch.\n        return {\n            ...state,\n            ..._storageState\n        };\n    } else {\n        return reducer(state, action)\n    }\n};\n\nexport const GITTOR_STORE = '@@gittor-store';\n\n\nfunction getStored() {\n    \"use strict\";\n    const store = window.localStorage.getItem(GITTOR_STORE);\n    if (!store || !store.match) return;\n    else if (store.match('^{(.*)}$')) {\n        return JSON.parse(store);\n    } else {\n        return JSON.parse(lz.decompress(store));\n    }\n}\n\nconst cachedStore = getStored();\nconst initialState = (window.__INITIAL_STATE__ || cachedStore || demoInitialState);\n\n// need to figure out the best way to apply localStorage update on the store.\nexport const rootStore = new Store(_reducer, initialState);\nsagaConnect(rootStore, getDropboxAccount(), true);\nsagaConnect(rootStore, onAccountBrowserOpen(), true);\nsagaConnect(rootStore, accountBrowserListFiles(), true);\nsagaConnect(rootStore, pushPost(), true);\nsagaConnect(rootStore, noticeProc(), true);\nsagaConnect(rootStore, onSetCurrentFolder(), true);\nsagaConnect(rootStore, pullPostFromService(), true);\nsagaConnect(rootStore, addAccountToPostProc(), true);\n// sagaConnect(rootStore, watchFolder(), true);\n\nwindow.onstorage = () => {\n    \"use strict\";\n    let storage = getStored();\n    if (typeof storage !== \"undefined\") {\n        rootStore.dispatch({type: \"STORAGE_UPDATE\", storage})\n    }\n};\n\n// for debug purpose\nwindow.dispatch = rootStore.dispatch.bind(rootStore);\n\nrootStore\n    .update$\n    // .debounceTime(500)\n    .subscribe(({state, action}) => {\n        if (action.type === \"STORAGE_UPDATE\") return;\n        console.log(\"state is\", state, \"action is\", action);\n        const serialized = JSON.stringify(state);\n        console.log(\"stringification has succeeded\");\n        // var compressed = lz.compress(serialized);\n        // console.log(`compression size reduction ${serialized.length} => ${compressed.length}`);\n        // console.log(serialized);\n        try {\n            window.localStorage.setItem(GITTOR_STORE, serialized);\n            console.log('state is precipitated to localStorage');\n        } catch (e) {\n            console.warn(e);\n        }\n\n    });\n\n//reminder: this should be removed after all of my devices have been updated. Somehow lots of these local storage feel fragile.\n//update: this worked well. Will try to test out more.\nlet postCollection = rootStore.getValue().posts;\n// Object.keys(postCollection).map(k => postCollection[k]).map(upgradeInkFile);\n\n/* upgrade functions */\nfunction upgradeDropboxAccount(post) {\n    \"use strict\";\n    if (post.account) {\n        let newPost = {...post, accountKey: dropboxAccountKey(post.account)};\n        delete newPost['account'];\n        setTimeout(() => {\n            rootStore.dispatch({\n                type: \"OVERWRITE_POST\",\n                post: newPost\n            })\n        }, 1000);\n    }\n}\n\nfunction upgradeInkFile(post) {\n    \"use strict\";\n    if (!post.title.match(/\\.ink$/i) || (post.source && post.source.length > 0 && !post.source[0].config)) return;\n    let newSource = [post.source];\n    let newPost = {...post, source: newSource};\n    setTimeout(() => {\n        console.log('upgrading post');\n        console.log(post);\n        rootStore.dispatch({\n            type: \"OVERWRITE_POST\",\n            post: newPost,\n            presence: {}\n        })\n    }, 1000);\n\n}\n"]}