{"version":3,"sources":["../../../src/store/accounts/accounts.js"],"names":["validateAccount","dropboxAccountKey","dropboxDateStringToIntDate","unixEpochToDropboxDateString","isDropboxId","getServiceFromAccountKey","accountKeyIsService","accounts","addAccountToPost","getDropboxAccount","ALLOWED_SERVICES","account","service","indexOf","uid","undefined","dateString","console","error","valueOf","unixEpoch","Error","utc","format","postId","match","accountKey","split","targetService","ind","state","action","type","_key","newState","parentFolder","post","id","getAccountInfo","_account"],"mappings":"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","file":"accounts.js","sourcesContent":["/** Created by ge on 5/14/16. */\nimport {ADD_ACCOUNT_TO_POST} from \"../posts/posts\";\nimport {take, dispatch} from \"luna-saga\";\nimport dapi from \"../../modules/dropbox\";\nimport \"regenerator-runtime/runtime\";\nimport moment from \"moment\";\n\n\nconst ALLOWED_SERVICES = [\"email\", \"dropbox\"];\n\nexport function validateAccount(account) {\n    // account is valid if account has the service field, and service is one of the ones listed above.\n    // require fields: service, uid.\n    return (!!account && account.service && (ALLOWED_SERVICES.indexOf(account.service) > -1) && account.uid);\n}\n\nexport function dropboxAccountKey(account) {\n    return (account ? account.service + ':' + account.uid : undefined);\n}\n\nexport function dropboxDateStringToIntDate(dateString) {\n    \"use strict\";\n    if (typeof dateString === \"undefined\") console.error('variable dateString is not defined');\n    return moment(dateString).valueOf();\n}\n\nexport function unixEpochToDropboxDateString(unixEpoch) {\n    \"use strict\";\n    if (typeof unixEpoch === \"undefined\") throw Error('variable unixEpoch is not defined');\n    return moment.utc(unixEpoch).format()\n}\n\nexport function isDropboxId(postId) {\n    \"use strict\";\n    return (!!postId && postId.match(/^id:/));\n}\n\nexport function getServiceFromAccountKey(accountKey) {\n    \"use strict\";\n    return accountKey ? accountKey.split(':')[0] : undefined;\n}\n\nexport function accountKeyIsService(accountKey, targetService) {\n    \"use strict\";\n    if (typeof targetService !== \"undefined\") {\n        let ind = ALLOWED_SERVICES.indexOf(targetService);\n        let service = ALLOWED_SERVICES[ind];\n        return getServiceFromAccountKey(accountKey) === service;\n    } else {\n        return false;\n    }\n}\n\nexport function accounts(state = {}, action) {\n    if (action.type === \"UPSERT_ACCOUNT\") {\n        if (!validateAccount(action.account)) return state;\n        return {\n            ...state,\n            [dropboxAccountKey(action.account)]: action.account\n        };\n    } else if (action.type === \"UPDATE_ACCOUNT\") {\n        if (!validateAccount(action.account)) return state;\n        let _key = dropboxAccountKey(action.account);\n        if (!state[_key]) return state;\n        return {\n            ...state,\n            [dropboxAccountKey(action.account)]: {...state[dropboxAccountKey], ...action.account}\n        };\n    } else if (action.type === \"DELETE_ACCOUNT\") {\n        if (!validateAccount(action.account)) return state;\n        let newState = {...state};\n        delete newState[dropboxAccountKey(action.account)];\n        return newState;\n    }\n    return state;\n}\n\n/* Action Creators */\n\n//backlog: move this to better place\nexport function addAccountToPost(postId, account, parentFolder) {\n    \"use strict\";\n    return {\n        type: ADD_ACCOUNT_TO_POST,\n        post: {\n            id: postId,\n            accountKey: dropboxAccountKey(account),\n            parentFolder\n        }\n    }\n}\n\nexport function* getDropboxAccount() {\n    // todo: need to dispatch another action after this.\n    \"use strict\";\n    while (true) {\n        const {action} = yield take('UPSERT_ACCOUNT');\n        const {account} = action;\n        if (account.service === \"dropbox\") {\n            let _account = yield dapi.getAccountInfo();\n            if (!!_account) yield dispatch({\n                type: \"UPDATE_ACCOUNT\",\n                account: {\n                    ...account, ..._account\n                }\n            });\n        }\n    }\n}\n\n"]}