{"version":3,"sources":["../../../src/components/note-list/BreadCrumBadges.js"],"names":["BreadCrumBadges","path","e","stopPropagation","preventDefault","nextProps","currentFolder","props","displayPath","goToPath","match","paths","slice","split","map","folder","ind","color","fontWeight","margin","lineHeight","join","console","warn"],"mappings":";;;;;;;;;AACA;;;;AAEA;;;;;;;;;;+eAHA;;AAEA;;;IAUaA,e,WAAAA,e;;;;;;;;;;;iCAEAC,I,EAAM;AACX,mBAAO,UAACC,CAAD,EAAO;AACVA,kBAAEC,eAAF;AACAD,kBAAEE,cAAF;AACA;AACA;AACH,aALD;AAMH;;;8CAEqBC,S,EAAW;AAC7B,mBACIA,UAAUC,aAAV,KAA4B,KAAKC,KAAL,CAAWD,aAAvC,IACAD,UAAUG,WAAV,KAA0B,KAAKD,KAAL,CAAWC,WAFzC;AAIH;;;iCAEQ;AACL;;AADK;;AAAA,yBAEgC,KAAKD,KAFrC;AAAA,gBAEED,aAFF,UAEEA,aAFF;AAAA,gBAEiBE,WAFjB,UAEiBA,WAFjB;AAGL;AACA;;AACA,gBAAIA,gBAAgB,IAApB,EAA0B,OAAO;AAAA;AAAA,kBAAgB,SAAS,KAAKC,QAAL,CAAcH,aAAd,CAAzB;AAAA;AAAA,aAAP;AAC1B,gBAAIE,YAAYE,KAAZ,CAAkB,OAAlB,CAAJ,EAAgC;AAC5B,oBAAIC,QAAQH,YAAYI,KAAZ,CAAkB,CAAlB,EAAqBC,KAArB,CAA2B,GAA3B,CAAZ;AACA,uBAAO;AAAA;AAAA;AACX;AAAA;AAAA,0BAAgB,SAAS,KAAKJ,QAAL,CAAcH,aAAd,CAAzB;AAAA;AAAA,qBADW;AAEFK,0BAAMG,GAAN,CAAU,UAACC,MAAD,EAASC,GAAT;AAAA,+BAAiB,CACxB;AAAA;AAAA,8BAAM,OAAO;AACTC,2CAAO,SADE;AAETC,gDAAY,GAFH;AAGTC,4CAAQ,cAHC;AAITC,gDAAY;AAJH,iCAAb;AAAA;AAAA,yBADwB,EAOxB;AAAA;AAAA;AACI,yCAAS,OAAKX,QAAL,CAAcH,gBAAgB,GAAhB,GAAsBK,MAAMC,KAAN,CAAY,CAAZ,EAAeI,MAAM,CAArB,EAAwBK,IAAxB,CAA6B,GAA7B,CAApC,CADb;AACsFN;AADtF,yBAPwB,CAAjB;AAAA,qBAAV;AAFE,iBAAP;AAYH,aAdD,MAcO,IAAIP,YAAYE,KAAZ,CAAkB,KAAlB,CAAJ,EAA8B;AACjC,oBAAIC,SAAQH,YAAYI,KAAZ,CAAkB,CAAlB,EAAqBC,KAArB,CAA2B,GAA3B,CAAZ;AACA,uBAAO;AAAA;AAAA;AAAOF,2BAAMG,GAAN,CAAU,UAACC,MAAD,EAASC,GAAT;AAAA,+BAAiB,CACrCA,MAAM;AACF;AAAA;AAAA;AACI,uCAAO,EAACC,OAAO,SAAR,EAAmBC,YAAY,GAA/B,EAAoCC,QAAQ,cAA5C,EAA4DC,YAAY,MAAxE,EADX;AAAA;AAAA,yBADJ,GAGM,IAJ+B,EAKrC;AAAA;AAAA;AACI,yCAAS,OAAKX,QAAL,CAAc,MAAME,OAAMC,KAAN,CAAY,CAAZ,EAAeI,MAAM,CAArB,EAAwBK,IAAxB,CAA6B,GAA7B,CAApB,CADb;AACsEN;AADtE,yBALqC,CAAjB;AAAA,qBAAV;AAAP,iBAAP;AAQH,aAVM,MAUA;AACHO,wBAAQC,IAAR,CAAaf,WAAb;AACA,uBAAO;AAAA;AAAA;AAAA;AAAA,iBAAP;AACH;AACJ","file":"BreadCrumBadges.js","sourcesContent":["/** Created by ge on 12/30/16. */\nimport React, {Component} from \"react\";\n// import {setCurrentFolder} from \"../../store/postList\";\nimport SmallBlueBadge from \"../badge/SmallBlueBadge\";\n\ntype Props = {\n    accountKey?: string,\n    currentFolder?: string,\n    displayPath?: string,\n    dispatch: Function\n};\n\nexport class BreadCrumBadges extends Component<Props> {\n\n    goToPath(path) {\n        return (e) => {\n            e.stopPropagation();\n            e.preventDefault();\n            // todo: add back for live version\n            // this.props.dispatch(setCurrentFolder(this.props.accountKey, path))\n        }\n    }\n\n    shouldComponentUpdate(nextProps) {\n        return (\n            nextProps.currentFolder !== this.props.currentFolder ||\n            nextProps.displayPath !== this.props.displayPath\n        );\n    }\n\n    render() {\n        \"use strict\";\n        const {currentFolder, displayPath} = this.props;\n        // console.log(currentFolder, displayPath);\n        // is relative\n        if (displayPath === \"./\") return <SmallBlueBadge onClick={this.goToPath(currentFolder)}>./</SmallBlueBadge>;\n        if (displayPath.match(/^\\.\\//)) {\n            let paths = displayPath.slice(2).split('/');\n            return <span>\n        <SmallBlueBadge onClick={this.goToPath(currentFolder)}>./</SmallBlueBadge>\n                {paths.map((folder, ind) => [\n                    <span style={{\n                        color: \"#23aaff\",\n                        fontWeight: 900,\n                        margin: \"10px 2px 0px\",\n                        lineHeight: \"24px\"\n                    }}>›</span>,\n                    <SmallBlueBadge\n                        onClick={this.goToPath(currentFolder + '/' + paths.slice(0, ind + 1).join('/'))}>{folder}</SmallBlueBadge>\n                ])}</span>\n        } else if (displayPath.match(/^\\//)) {\n            let paths = displayPath.slice(1).split('/');\n            return <span>{paths.map((folder, ind) => [\n                ind ? // hide the first one\n                    <span\n                        style={{color: \"#23aaff\", fontWeight: 900, margin: \"10px 2px 0px\", lineHeight: \"16px\"}}>›</span>\n                    : null,\n                <SmallBlueBadge\n                    onClick={this.goToPath('/' + paths.slice(0, ind + 1).join('/'))}>{folder}</SmallBlueBadge>\n            ])}</span>\n        } else {\n            console.warn(displayPath);\n            return <warning>path is malformed</warning>\n        }\n    }\n}\n"]}