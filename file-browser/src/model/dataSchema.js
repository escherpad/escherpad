// @flow

declare type AccountT = {
    $key: string, // locally generated uuid, used internally in our app
    client_id: string, // OAuth client_id
    access_token: string, // OAuth token
    backend: string,
    /** view, read-only fields.
     * design of schema of this field is given by what the components require. */
        view: {
        user_id: string,
        username: string,
        email: string,
        name: string
    }
};

/**
 * A unified file system
 * dropbox uses file id.
 * github uses path.
 * jupyter uses path plus kernel-session id
 */


declare type FileObjectT = {
    $key: string, // this is the id of the note. For Dropbox files, this is the server-side file id.
    v: number, // version number
    account: string, // id of the service account, saved separately.
    parent_directory: string, // path of the file, use display_path for dropbox files.
    file_name: string, // file name of the file
    content: string, // text or base64 // GitHub uses base64, convert to text or binary.
    summary: string, // summary data (
    date_modified: Date, // does not exist with GitHub?
    date_created: Date, // does not exist with GitHub?
    date_visited: Date, // does not exist with GitHub?
    presence: { // all of the user interaction presence data are saved here.
        $agents: any
    },
    view: { // data generated by our app, for viewing purposes.
        service_type: string, // Dropbox, GitHub, etc...
        file_ext: string,
        time_stamp: 'yesterday',
        time_stamp_detail: "2017-10-09-12:45",
        meme_type: 'markdown',
        preview: string, // not saved, not OT. usually base64 encoded
    }
};
export type {AccountT, FileObjectT};
